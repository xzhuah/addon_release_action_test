name: Automatic Release Action for Github, 自动发布插件的Github Action

on:
  push:
    branches:
      - main
  workflow_dispatch:
    inputs:
      addons:
        description: "Comma-separated list of addon names you want to release for your project (e.g., addon1,addon2,addon3)"
        required: true
        # Please set the list of addon name here 请在此处设置你要发布的插件名称，多个插件用逗号分隔
        default: "sample_addon" # Default value if none is provided during dispatch

jobs:
  release:
    runs-on: ubuntu-latest

    steps:
      # Step 1: Checkout the repository
      - name: Checkout code
        uses: actions/checkout@v3

      # Step 2: Set up Python environment
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'
      # Step 3: List all inputs received by the workflow (for debugging)
      - name: List all inputs
        run: |
          echo "Workflow inputs: ${{ toJson(github.event.inputs) }}"

      # Step 4: Debug workflow inputs to ensure the correct value
      - name: Debug workflow inputs
        run: |
          echo "Received addons input: '${{ github.event.inputs.addons }}'"
      # Step 3: Run the release script for each addon
      - name: Run release script
        run: |
          # Retrieve the addons list from workflow inputs
          ADDONS="${{ github.event.inputs.addons }}"
          echo "Processing the following addons: $ADDONS"
          if [ -z "$ADDONS" ]; then
            echo "No addons specified. Exiting."
            exit 1
          fi
          
          # Ensure the output directory exists
          mkdir -p ../addon_release
          
          # Split the addons string into an array and run the script for each addon
          IFS=',' read -r -a ADDON_ARRAY <<< "$ADDONS"
          for addon in "${ADDON_ARRAY[@]}"; do
            echo "Processing addon: $addon"
            python release.py "$addon" --with_version
          done

      # Step 4: Create a release and upload assets
      - name: Create GitHub Release
        id: create_release
        uses: actions/create-release@v1
        with:
          tag_name: "release-${{ github.run_id }}"
          release_name: "Release ${{ github.run_id }}"
          draft: false
          prerelease: false
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      # Step 5: Upload all ZIP files as release assets
      - name: Upload release assets
        run: |
          for file in ../addon_release/*.zip; do
            echo "Uploading $file..."
            gh release upload "release-${{ github.run_id }}" "$file"
          done
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
